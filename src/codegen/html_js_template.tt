<!DOCTYPE html>
<html>
  <head>
    <title>B Program</title>
  </head>
  <body>
    <h2>Console:</h2>
    <pre id="log"></pre>
    <script>
"use strict";
// The compile B program
<<<GENERATED>>>

// The B runtime
const log = document.getElementById("log");
let logBuffer = "";
const utf8decoder = new TextDecoder();
function __flush() {
    log.innerText += logBuffer;
    logBuffer = "";
}
function __print_string(s) {
    for (let i = 0; i < s.length; ++i) {
        logBuffer += s[i];
        if (s[i] === '\n') __flush();
    }
}
function putchar(code) {
    __print_string(String.fromCharCode(code));
}
function strlen(ptr) {
    return (new Uint8Array(memory, ptr)).indexOf(0);
}
function isdigit(c) {
    c -= 48;
    return 0 <= c && c <= 9;
}
function printf(fmt, ...args) {
    const n = strlen(fmt);
    // TODO: print formatting is not fully implemented
    const bytes = memory.slice(fmt, fmt+n);
    const str = utf8decoder.decode(bytes);

    for (let i = 0; i < str.length;) {
        if (str[i] === '%') {
            i += 1;
            if (i >= str.length) throw new Error("Unfinished formating sequence");

            let width = 0;
            while (isdigit(str.charCodeAt(i)) && i < str.length) {
                width = width*10 + str.charCodeAt(i) - 48;
                i += 1;
            }

            const prefix = str.slice(i);
            const number_arg = ['lu', 'd'].find((arg) => prefix.startsWith(arg));
            if (number_arg !== undefined) {
                __print_string(Number(args.shift()).toString().padStart(width));
                i += number_arg.length;
            } else if (prefix.startsWith('%')) {
                __print_string('%');
                i += 1;
            } else if (prefix.startsWith('c')) {
                __print_string(String.fromCharCode(args.shift()).padStart(width));
                i += 1;
            } else {
                throw new Error(`Unknown format sequence starts with "${str[i]}"`);
            }
        } else {
            __print_string(str[i]);
            i += 1;
        }
    }
}
function malloc(size) {
    const ptr = memory.byteLength;
    memory.resize(ptr+size);
    return ptr;
}
function memset(ptr, byte, size) {
    let view = new Uint8Array(memory, ptr, size);
    let bytes = Array(size).fill(byte);
    view.set(bytes);
}
main();
__flush();
    </script>
  </body>
</html>
